server:
  port: 9000
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
spring:
  application:
    name: notification-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: "http://localhost:9001"
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 5
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    function:
      definition: sms|email # will compose these two functions as one function
    stream:
       #bindings will bind the function input out to the destination (exchange in rabbitmq), it will create queue as <destination>.<group> 
       #if it does not exist
      bindings:
        smsemail-in-0: #Input binding: <functionName> + -in- + <index> ( unless you use partitions index will be 0)
          #destination is an exchange in rabbitmq 
          destination: notify-user
          group: ${spring.application.name}
        smsemail-out-0: #Output binding: <functionName> + -out- + <index> ( unless you use partitions index will be 0)
          destination: notification-success
             
rabbitmq:
    host: localhost
    port: 5672
    username: rabbit
    password: rabbit
    connection-timeout: 5s

# Enable refresh endpoint of the actuator, exposes HTTP /actuator/refresh endpoint
management:
  endpoints:
    web.exposure.include: refresh